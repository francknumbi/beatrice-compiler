/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import java.util.*;
import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class AInput extends PInput
{
    private TLecture _lecture_;
    private TIdentifiant _identifiant_;
    private final LinkedList<PPrefixe> _prefixe_ = new LinkedList<PPrefixe>();

    public AInput()
    {
        // Constructor
    }

    public AInput(
        @SuppressWarnings("hiding") TLecture _lecture_,
        @SuppressWarnings("hiding") TIdentifiant _identifiant_,
        @SuppressWarnings("hiding") List<?> _prefixe_)
    {
        // Constructor
        setLecture(_lecture_);

        setIdentifiant(_identifiant_);

        setPrefixe(_prefixe_);

    }

    @Override
    public Object clone()
    {
        return new AInput(
            cloneNode(this._lecture_),
            cloneNode(this._identifiant_),
            cloneList(this._prefixe_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInput(this);
    }

    public TLecture getLecture()
    {
        return this._lecture_;
    }

    public void setLecture(TLecture node)
    {
        if(this._lecture_ != null)
        {
            this._lecture_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lecture_ = node;
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    public LinkedList<PPrefixe> getPrefixe()
    {
        return this._prefixe_;
    }

    public void setPrefixe(List<?> list)
    {
        for(PPrefixe e : this._prefixe_)
        {
            e.parent(null);
        }
        this._prefixe_.clear();

        for(Object obj_e : list)
        {
            PPrefixe e = (PPrefixe) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._prefixe_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lecture_)
            + toString(this._identifiant_)
            + toString(this._prefixe_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lecture_ == child)
        {
            this._lecture_ = null;
            return;
        }

        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        if(this._prefixe_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lecture_ == oldChild)
        {
            setLecture((TLecture) newChild);
            return;
        }

        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        for(ListIterator<PPrefixe> i = this._prefixe_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPrefixe) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
