/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class ASequenceMessage extends PMessage
{
    private TConcat _gauche_;
    private TCaracteres _caracteres_;
    private TConcat _droite_;
    private TIdentifiant _identifiant_;

    public ASequenceMessage()
    {
        // Constructor
    }

    public ASequenceMessage(
        @SuppressWarnings("hiding") TConcat _gauche_,
        @SuppressWarnings("hiding") TCaracteres _caracteres_,
        @SuppressWarnings("hiding") TConcat _droite_,
        @SuppressWarnings("hiding") TIdentifiant _identifiant_)
    {
        // Constructor
        setGauche(_gauche_);

        setCaracteres(_caracteres_);

        setDroite(_droite_);

        setIdentifiant(_identifiant_);

    }

    @Override
    public Object clone()
    {
        return new ASequenceMessage(
            cloneNode(this._gauche_),
            cloneNode(this._caracteres_),
            cloneNode(this._droite_),
            cloneNode(this._identifiant_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequenceMessage(this);
    }

    public TConcat getGauche()
    {
        return this._gauche_;
    }

    public void setGauche(TConcat node)
    {
        if(this._gauche_ != null)
        {
            this._gauche_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gauche_ = node;
    }

    public TCaracteres getCaracteres()
    {
        return this._caracteres_;
    }

    public void setCaracteres(TCaracteres node)
    {
        if(this._caracteres_ != null)
        {
            this._caracteres_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._caracteres_ = node;
    }

    public TConcat getDroite()
    {
        return this._droite_;
    }

    public void setDroite(TConcat node)
    {
        if(this._droite_ != null)
        {
            this._droite_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._droite_ = node;
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._gauche_)
            + toString(this._caracteres_)
            + toString(this._droite_)
            + toString(this._identifiant_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._gauche_ == child)
        {
            this._gauche_ = null;
            return;
        }

        if(this._caracteres_ == child)
        {
            this._caracteres_ = null;
            return;
        }

        if(this._droite_ == child)
        {
            this._droite_ = null;
            return;
        }

        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._gauche_ == oldChild)
        {
            setGauche((TConcat) newChild);
            return;
        }

        if(this._caracteres_ == oldChild)
        {
            setCaracteres((TCaracteres) newChild);
            return;
        }

        if(this._droite_ == oldChild)
        {
            setDroite((TConcat) newChild);
            return;
        }

        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
