/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class ASinglePrint extends PPrint
{
    private TEcriture _ecriture_;
    private PMessageAdd _messageAdd_;

    public ASinglePrint()
    {
        // Constructor
    }

    public ASinglePrint(
        @SuppressWarnings("hiding") TEcriture _ecriture_,
        @SuppressWarnings("hiding") PMessageAdd _messageAdd_)
    {
        // Constructor
        setEcriture(_ecriture_);

        setMessageAdd(_messageAdd_);

    }

    @Override
    public Object clone()
    {
        return new ASinglePrint(
            cloneNode(this._ecriture_),
            cloneNode(this._messageAdd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASinglePrint(this);
    }

    public TEcriture getEcriture()
    {
        return this._ecriture_;
    }

    public void setEcriture(TEcriture node)
    {
        if(this._ecriture_ != null)
        {
            this._ecriture_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ecriture_ = node;
    }

    public PMessageAdd getMessageAdd()
    {
        return this._messageAdd_;
    }

    public void setMessageAdd(PMessageAdd node)
    {
        if(this._messageAdd_ != null)
        {
            this._messageAdd_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._messageAdd_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ecriture_)
            + toString(this._messageAdd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ecriture_ == child)
        {
            this._ecriture_ = null;
            return;
        }

        if(this._messageAdd_ == child)
        {
            this._messageAdd_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ecriture_ == oldChild)
        {
            setEcriture((TEcriture) newChild);
            return;
        }

        if(this._messageAdd_ == oldChild)
        {
            setMessageAdd((PMessageAdd) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
