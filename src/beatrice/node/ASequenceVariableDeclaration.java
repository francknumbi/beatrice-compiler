/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import java.util.*;
import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class ASequenceVariableDeclaration extends PVariableDeclaration
{
    private TIdentifiant _identifiant_;
    private PSuffixe _suffixe_;
    private final LinkedList<PDefAdd> _defAdd_ = new LinkedList<PDefAdd>();

    public ASequenceVariableDeclaration()
    {
        // Constructor
    }

    public ASequenceVariableDeclaration(
        @SuppressWarnings("hiding") TIdentifiant _identifiant_,
        @SuppressWarnings("hiding") PSuffixe _suffixe_,
        @SuppressWarnings("hiding") List<?> _defAdd_)
    {
        // Constructor
        setIdentifiant(_identifiant_);

        setSuffixe(_suffixe_);

        setDefAdd(_defAdd_);

    }

    @Override
    public Object clone()
    {
        return new ASequenceVariableDeclaration(
            cloneNode(this._identifiant_),
            cloneNode(this._suffixe_),
            cloneList(this._defAdd_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASequenceVariableDeclaration(this);
    }

    public TIdentifiant getIdentifiant()
    {
        return this._identifiant_;
    }

    public void setIdentifiant(TIdentifiant node)
    {
        if(this._identifiant_ != null)
        {
            this._identifiant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifiant_ = node;
    }

    public PSuffixe getSuffixe()
    {
        return this._suffixe_;
    }

    public void setSuffixe(PSuffixe node)
    {
        if(this._suffixe_ != null)
        {
            this._suffixe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._suffixe_ = node;
    }

    public LinkedList<PDefAdd> getDefAdd()
    {
        return this._defAdd_;
    }

    public void setDefAdd(List<?> list)
    {
        for(PDefAdd e : this._defAdd_)
        {
            e.parent(null);
        }
        this._defAdd_.clear();

        for(Object obj_e : list)
        {
            PDefAdd e = (PDefAdd) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._defAdd_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifiant_)
            + toString(this._suffixe_)
            + toString(this._defAdd_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifiant_ == child)
        {
            this._identifiant_ = null;
            return;
        }

        if(this._suffixe_ == child)
        {
            this._suffixe_ = null;
            return;
        }

        if(this._defAdd_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifiant_ == oldChild)
        {
            setIdentifiant((TIdentifiant) newChild);
            return;
        }

        if(this._suffixe_ == oldChild)
        {
            setSuffixe((PSuffixe) newChild);
            return;
        }

        for(ListIterator<PDefAdd> i = this._defAdd_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDefAdd) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
