/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import java.util.*;
import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class AConditionAdditionnelles extends PConditionAdditionnelles
{
    private TSinon _sinon_;
    private final LinkedList<PInstructions> _instructions_ = new LinkedList<PInstructions>();

    public AConditionAdditionnelles()
    {
        // Constructor
    }

    public AConditionAdditionnelles(
        @SuppressWarnings("hiding") TSinon _sinon_,
        @SuppressWarnings("hiding") List<?> _instructions_)
    {
        // Constructor
        setSinon(_sinon_);

        setInstructions(_instructions_);

    }

    @Override
    public Object clone()
    {
        return new AConditionAdditionnelles(
            cloneNode(this._sinon_),
            cloneList(this._instructions_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAConditionAdditionnelles(this);
    }

    public TSinon getSinon()
    {
        return this._sinon_;
    }

    public void setSinon(TSinon node)
    {
        if(this._sinon_ != null)
        {
            this._sinon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sinon_ = node;
    }

    public LinkedList<PInstructions> getInstructions()
    {
        return this._instructions_;
    }

    public void setInstructions(List<?> list)
    {
        for(PInstructions e : this._instructions_)
        {
            e.parent(null);
        }
        this._instructions_.clear();

        for(Object obj_e : list)
        {
            PInstructions e = (PInstructions) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._instructions_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sinon_)
            + toString(this._instructions_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sinon_ == child)
        {
            this._sinon_ = null;
            return;
        }

        if(this._instructions_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sinon_ == oldChild)
        {
            setSinon((TSinon) newChild);
            return;
        }

        for(ListIterator<PInstructions> i = this._instructions_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInstructions) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
