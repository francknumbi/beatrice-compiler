/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.node;

import beatrice.analysis.*;

@SuppressWarnings("nls")
public final class ADifferentConditionSimple extends PConditionSimple
{
    private PExpress _gauche_;
    private TOperateurDifferent _operateurDifferent_;
    private PExpress _droite_;

    public ADifferentConditionSimple()
    {
        // Constructor
    }

    public ADifferentConditionSimple(
        @SuppressWarnings("hiding") PExpress _gauche_,
        @SuppressWarnings("hiding") TOperateurDifferent _operateurDifferent_,
        @SuppressWarnings("hiding") PExpress _droite_)
    {
        // Constructor
        setGauche(_gauche_);

        setOperateurDifferent(_operateurDifferent_);

        setDroite(_droite_);

    }

    @Override
    public Object clone()
    {
        return new ADifferentConditionSimple(
            cloneNode(this._gauche_),
            cloneNode(this._operateurDifferent_),
            cloneNode(this._droite_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseADifferentConditionSimple(this);
    }

    public PExpress getGauche()
    {
        return this._gauche_;
    }

    public void setGauche(PExpress node)
    {
        if(this._gauche_ != null)
        {
            this._gauche_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._gauche_ = node;
    }

    public TOperateurDifferent getOperateurDifferent()
    {
        return this._operateurDifferent_;
    }

    public void setOperateurDifferent(TOperateurDifferent node)
    {
        if(this._operateurDifferent_ != null)
        {
            this._operateurDifferent_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._operateurDifferent_ = node;
    }

    public PExpress getDroite()
    {
        return this._droite_;
    }

    public void setDroite(PExpress node)
    {
        if(this._droite_ != null)
        {
            this._droite_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._droite_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._gauche_)
            + toString(this._operateurDifferent_)
            + toString(this._droite_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._gauche_ == child)
        {
            this._gauche_ = null;
            return;
        }

        if(this._operateurDifferent_ == child)
        {
            this._operateurDifferent_ = null;
            return;
        }

        if(this._droite_ == child)
        {
            this._droite_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._gauche_ == oldChild)
        {
            setGauche((PExpress) newChild);
            return;
        }

        if(this._operateurDifferent_ == oldChild)
        {
            setOperateurDifferent((TOperateurDifferent) newChild);
            return;
        }

        if(this._droite_ == oldChild)
        {
            setDroite((PExpress) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
