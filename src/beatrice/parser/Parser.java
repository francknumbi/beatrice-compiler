/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.parser;

import beatrice.lexer.*;
import beatrice.node.*;
import beatrice.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAalgorithmeprogramme1Programme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAalgorithmeprogramme2Programme */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AVideEntete */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce ADefinitionEntete */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list, false);
            }
            break;
            case 4: /* reduce ASingleVariableDeclaration */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AAsequencevariabledeclaration1VariableDeclaration */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AAsequencevariabledeclaration2VariableDeclaration */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list, false);
            }
            break;
            case 7: /* reduce ADefAdd */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce APrefixeCompose */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce APrefixe */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce ASuffixe */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce ACaractereType */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AEntierType */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AByteType */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AReelType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AAfficherInstructions */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce AEcritureInstructions */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AConditionnelleInstructions */
            {
                ArrayList<Object> list = new17();
                push(goTo(8), list, false);
            }
            break;
            case 18: /* reduce AInstructions */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, false);
            }
            break;
            case 19: /* reduce AAffectation */
            {
                ArrayList<Object> list = new19();
                push(goTo(9), list, false);
            }
            break;
            case 20: /* reduce AExpress */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AAdditionExpress */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce ASoustractionExpress */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce ATermeFacteur */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AMultiplicationFacteur */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce ADivisionFacteur */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AModuloFacteur */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce APuissanceFacteur */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list, false);
            }
            break;
            case 28: /* reduce AValeurTerme */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce AIdentifiantTerme */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AParenthesesTerme */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AAinput1Input */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list, false);
            }
            break;
            case 32: /* reduce AAinput2Input */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce APrint */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list, false);
            }
            break;
            case 34: /* reduce ASinglePrint */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list, false);
            }
            break;
            case 35: /* reduce ASequenceMessage */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AMessageAdd */
            {
                ArrayList<Object> list = new36();
                push(goTo(16), list, false);
            }
            break;
            case 37: /* reduce AChaineMessageAdd */
            {
                ArrayList<Object> list = new37();
                push(goTo(16), list, false);
            }
            break;
            case 38: /* reduce ASimpleStructureConditionnelle */
            {
                ArrayList<Object> list = new38();
                push(goTo(17), list, false);
            }
            break;
            case 39: /* reduce ACompleteStructureConditionnelle */
            {
                ArrayList<Object> list = new39();
                push(goTo(17), list, false);
            }
            break;
            case 40: /* reduce AGlobaleStructureConditionnelle */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce AAformesimple1FormeSimple */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list, false);
            }
            break;
            case 42: /* reduce AAformesimple2FormeSimple */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list, false);
            }
            break;
            case 43: /* reduce AAformecomplete1FormeComplete */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list, false);
            }
            break;
            case 44: /* reduce AAformecomplete2FormeComplete */
            {
                ArrayList<Object> list = new44();
                push(goTo(19), list, false);
            }
            break;
            case 45: /* reduce AAformeglobale1FormeGlobale */
            {
                ArrayList<Object> list = new45();
                push(goTo(20), list, false);
            }
            break;
            case 46: /* reduce AAformeglobale2FormeGlobale */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list, false);
            }
            break;
            case 47: /* reduce AAformeglobale3FormeGlobale */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list, false);
            }
            break;
            case 48: /* reduce AAformeglobale4FormeGlobale */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AAconditionadditionnelles1ConditionAdditionnelles */
            {
                ArrayList<Object> list = new49();
                push(goTo(21), list, false);
            }
            break;
            case 50: /* reduce AAconditionadditionnelles2ConditionAdditionnelles */
            {
                ArrayList<Object> list = new50();
                push(goTo(21), list, false);
            }
            break;
            case 51: /* reduce AAsinonsi1Sinonsi */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list, false);
            }
            break;
            case 52: /* reduce AAsinonsi2Sinonsi */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list, false);
            }
            break;
            case 53: /* reduce ASimpleCondition */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list, false);
            }
            break;
            case 54: /* reduce AComposeCondition */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list, false);
            }
            break;
            case 55: /* reduce AInferieurConditionSimple */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list, false);
            }
            break;
            case 56: /* reduce ASuperieurConditionSimple */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list, false);
            }
            break;
            case 57: /* reduce ADifferentConditionSimple */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list, false);
            }
            break;
            case 58: /* reduce AEgalConditionSimple */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list, false);
            }
            break;
            case 59: /* reduce ASupegalConditionSimple */
            {
                ArrayList<Object> list = new59();
                push(goTo(24), list, false);
            }
            break;
            case 60: /* reduce AInfegalConditionSimple */
            {
                ArrayList<Object> list = new60();
                push(goTo(24), list, false);
            }
            break;
            case 61: /* reduce AParentheseConditionSimple */
            {
                ArrayList<Object> list = new61();
                push(goTo(24), list, false);
            }
            break;
            case 62: /* reduce AEtConditionCompose */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list, false);
            }
            break;
            case 63: /* reduce AOuConditionCompose */
            {
                ArrayList<Object> list = new63();
                push(goTo(25), list, false);
            }
            break;
            case 64: /* reduce AConditionCompose */
            {
                ArrayList<Object> list = new64();
                push(goTo(25), list, false);
            }
            break;
            case 65: /* reduce ATerminal$Instructions */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list, true);
            }
            break;
            case 66: /* reduce ANonTerminal$Instructions */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list, true);
            }
            break;
            case 67: /* reduce ATerminal$DefAdd */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list, true);
            }
            break;
            case 68: /* reduce ANonTerminal$DefAdd */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list, true);
            }
            break;
            case 69: /* reduce ATerminal$Prefixe */
            {
                ArrayList<Object> list = new69();
                push(goTo(28), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$Prefixe */
            {
                ArrayList<Object> list = new70();
                push(goTo(28), list, true);
            }
            break;
            case 71: /* reduce ATerminal$Message */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list, true);
            }
            break;
            case 72: /* reduce ANonTerminal$Message */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list, true);
            }
            break;
            case 73: /* reduce ATerminal$Sinonsi */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list, true);
            }
            break;
            case 74: /* reduce ANonTerminal$Sinonsi */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAalgorithmeprogramme1Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PEntete penteteNode2;
        TDebut tdebutNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TFin tfinNode5;
        penteteNode2 = (PEntete)nodeArrayList1.get(0);
        tdebutNode3 = (TDebut)nodeArrayList2.get(0);
        {
            // Block
        }
        tfinNode5 = (TFin)nodeArrayList3.get(0);

        pprogrammeNode1 = new AAlgorithmeProgramme(penteteNode2, tdebutNode3, listNode4, tfinNode5);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAalgorithmeprogramme2Programme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PEntete penteteNode2;
        TDebut tdebutNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFin tfinNode6;
        penteteNode2 = (PEntete)nodeArrayList1.get(0);
        tdebutNode3 = (TDebut)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        tfinNode6 = (TFin)nodeArrayList4.get(0);

        pprogrammeNode1 = new AAlgorithmeProgramme(penteteNode2, tdebutNode3, listNode5, tfinNode6);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVideEntete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PEntete penteteNode1;
        {
            // Block

        penteteNode1 = new AVideEntete();
        }
	nodeList.add(penteteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ADefinitionEntete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PEntete penteteNode1;
        {
            // Block
        TVariables tvariablesNode2;
        PVariableDeclaration pvariabledeclarationNode3;
        tvariablesNode2 = (TVariables)nodeArrayList1.get(0);
        pvariabledeclarationNode3 = (PVariableDeclaration)nodeArrayList2.get(0);

        penteteNode1 = new ADefinitionEntete(tvariablesNode2, pvariabledeclarationNode3);
        }
	nodeList.add(penteteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce ASingleVariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        PSuffixe psuffixeNode3;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        psuffixeNode3 = (PSuffixe)nodeArrayList2.get(0);

        pvariabledeclarationNode1 = new ASingleVariableDeclaration(tidentifiantNode2, psuffixeNode3);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAsequencevariabledeclaration1VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pvariabledeclarationNode1 = new ASequenceVariableDeclaration(tidentifiantNode2, null, listNode5);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAsequencevariabledeclaration2VariableDeclaration */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariableDeclaration pvariabledeclarationNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        PSuffixe psuffixeNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        psuffixeNode3 = (PSuffixe)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pvariabledeclarationNode1 = new ASequenceVariableDeclaration(tidentifiantNode2, psuffixeNode3, listNode5);
        }
	nodeList.add(pvariabledeclarationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ADefAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDefAdd pdefaddNode1;
        {
            // Block
        PPrefixeCompose pprefixecomposeNode2;
        PSuffixe psuffixeNode3;
        pprefixecomposeNode2 = (PPrefixeCompose)nodeArrayList1.get(0);
        psuffixeNode3 = (PSuffixe)nodeArrayList2.get(0);

        pdefaddNode1 = new ADefAdd(pprefixecomposeNode2, psuffixeNode3);
        }
	nodeList.add(pdefaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce APrefixeCompose */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixeCompose pprefixecomposeNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pprefixecomposeNode1 = new APrefixeCompose(listNode3);
        }
	nodeList.add(pprefixecomposeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce APrefixe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrefixe pprefixeNode1;
        {
            // Block
        TSeparateur tseparateurNode2;
        TIdentifiant tidentifiantNode3;
        tseparateurNode2 = (TSeparateur)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);

        pprefixeNode1 = new APrefixe(tseparateurNode2, tidentifiantNode3);
        }
	nodeList.add(pprefixeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ASuffixe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSuffixe psuffixeNode1;
        {
            // Block
        TDef tdefNode2;
        PType ptypeNode3;
        tdefNode2 = (TDef)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);

        psuffixeNode1 = new ASuffixe(tdefNode2, ptypeNode3);
        }
	nodeList.add(psuffixeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce ACaractereType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        ptypeNode1 = new ACaractereType(tcaractereNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AEntierType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TEntier tentierNode2;
        tentierNode2 = (TEntier)nodeArrayList1.get(0);

        ptypeNode1 = new AEntierType(tentierNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AByteType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TByte tbyteNode2;
        tbyteNode2 = (TByte)nodeArrayList1.get(0);

        ptypeNode1 = new AByteType(tbyteNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AReelType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TReel treelNode2;
        treelNode2 = (TReel)nodeArrayList1.get(0);

        ptypeNode1 = new AReelType(treelNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAfficherInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PPrint pprintNode2;
        pprintNode2 = (PPrint)nodeArrayList1.get(0);

        pinstructionsNode1 = new AAfficherInstructions(pprintNode2);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AEcritureInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PInput pinputNode2;
        pinputNode2 = (PInput)nodeArrayList1.get(0);

        pinstructionsNode1 = new AEcritureInstructions(pinputNode2);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AConditionnelleInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PStructureConditionnelle pstructureconditionnelleNode2;
        pstructureconditionnelleNode2 = (PStructureConditionnelle)nodeArrayList1.get(0);

        pinstructionsNode1 = new AConditionnelleInstructions(pstructureconditionnelleNode2);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AInstructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstructions pinstructionsNode1;
        {
            // Block
        PAffectation paffectationNode2;
        paffectationNode2 = (PAffectation)nodeArrayList1.get(0);

        pinstructionsNode1 = new AInstructions(paffectationNode2);
        }
	nodeList.add(pinstructionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAffectation */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffectation paffectationNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        TOperateurAffectation toperateuraffectationNode3;
        PExpress pexpressNode4;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);
        toperateuraffectationNode3 = (TOperateurAffectation)nodeArrayList2.get(0);
        pexpressNode4 = (PExpress)nodeArrayList3.get(0);

        paffectationNode1 = new AAffectation(tidentifiantNode2, toperateuraffectationNode3, pexpressNode4);
        }
	nodeList.add(paffectationNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpress pexpressNode1;
        {
            // Block
        PFacteur pfacteurNode2;
        pfacteurNode2 = (PFacteur)nodeArrayList1.get(0);

        pexpressNode1 = new AExpress(pfacteurNode2);
        }
	nodeList.add(pexpressNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAdditionExpress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpress pexpressNode1;
        {
            // Block
        PExpress pexpressNode2;
        TPlus tplusNode3;
        PFacteur pfacteurNode4;
        pexpressNode2 = (PExpress)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfacteurNode4 = (PFacteur)nodeArrayList3.get(0);

        pexpressNode1 = new AAdditionExpress(pexpressNode2, tplusNode3, pfacteurNode4);
        }
	nodeList.add(pexpressNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASoustractionExpress */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpress pexpressNode1;
        {
            // Block
        PExpress pexpressNode2;
        TMoins tmoinsNode3;
        PFacteur pfacteurNode4;
        pexpressNode2 = (PExpress)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pfacteurNode4 = (PFacteur)nodeArrayList3.get(0);

        pexpressNode1 = new ASoustractionExpress(pexpressNode2, tmoinsNode3, pfacteurNode4);
        }
	nodeList.add(pexpressNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ATermeFacteur */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFacteur pfacteurNode1;
        {
            // Block
        PTerme ptermeNode2;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);

        pfacteurNode1 = new ATermeFacteur(ptermeNode2);
        }
	nodeList.add(pfacteurNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AMultiplicationFacteur */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFacteur pfacteurNode1;
        {
            // Block
        PFacteur pfacteurNode2;
        TMult tmultNode3;
        PTerme ptermeNode4;
        pfacteurNode2 = (PFacteur)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pfacteurNode1 = new AMultiplicationFacteur(pfacteurNode2, tmultNode3, ptermeNode4);
        }
	nodeList.add(pfacteurNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce ADivisionFacteur */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFacteur pfacteurNode1;
        {
            // Block
        PFacteur pfacteurNode2;
        TDiv tdivNode3;
        PTerme ptermeNode4;
        pfacteurNode2 = (PFacteur)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pfacteurNode1 = new ADivisionFacteur(pfacteurNode2, tdivNode3, ptermeNode4);
        }
	nodeList.add(pfacteurNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AModuloFacteur */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFacteur pfacteurNode1;
        {
            // Block
        PFacteur pfacteurNode2;
        TMod tmodNode3;
        PTerme ptermeNode4;
        pfacteurNode2 = (PFacteur)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pfacteurNode1 = new AModuloFacteur(pfacteurNode2, tmodNode3, ptermeNode4);
        }
	nodeList.add(pfacteurNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APuissanceFacteur */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFacteur pfacteurNode1;
        {
            // Block
        PFacteur pfacteurNode2;
        TPuissance tpuissanceNode3;
        PTerme ptermeNode4;
        pfacteurNode2 = (PFacteur)nodeArrayList1.get(0);
        tpuissanceNode3 = (TPuissance)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pfacteurNode1 = new APuissanceFacteur(pfacteurNode2, tpuissanceNode3, ptermeNode4);
        }
	nodeList.add(pfacteurNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AValeurTerme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerme ptermeNode1;
        {
            // Block
        TNumerique tnumeriqueNode2;
        tnumeriqueNode2 = (TNumerique)nodeArrayList1.get(0);

        ptermeNode1 = new AValeurTerme(tnumeriqueNode2);
        }
	nodeList.add(ptermeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AIdentifiantTerme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerme ptermeNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);

        ptermeNode1 = new AIdentifiantTerme(tidentifiantNode2);
        }
	nodeList.add(ptermeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AParenthesesTerme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerme ptermeNode1;
        {
            // Block
        TParentheseO tparentheseoNode2;
        PExpress pexpressNode3;
        TParentheseF tparenthesefNode4;
        tparentheseoNode2 = (TParentheseO)nodeArrayList1.get(0);
        pexpressNode3 = (PExpress)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParentheseF)nodeArrayList3.get(0);

        ptermeNode1 = new AParenthesesTerme(tparentheseoNode2, pexpressNode3, tparenthesefNode4);
        }
	nodeList.add(ptermeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAinput1Input */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        TLecture tlectureNode2;
        TIdentifiant tidentifiantNode3;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tlectureNode2 = (TLecture)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);
        {
            // Block
        }

        pinputNode1 = new AInput(tlectureNode2, tidentifiantNode3, listNode4);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAinput2Input */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInput pinputNode1;
        {
            // Block
        TLecture tlectureNode2;
        TIdentifiant tidentifiantNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tlectureNode2 = (TLecture)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pinputNode1 = new AInput(tlectureNode2, tidentifiantNode3, listNode5);
        }
	nodeList.add(pinputNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce APrint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrint pprintNode1;
        {
            // Block
        TEcriture tecritureNode2;
        TIdentifiant tidentifiantNode3;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tecritureNode2 = (TEcriture)nodeArrayList1.get(0);
        tidentifiantNode3 = (TIdentifiant)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pprintNode1 = new APrint(tecritureNode2, tidentifiantNode3, listNode5);
        }
	nodeList.add(pprintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce ASinglePrint */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPrint pprintNode1;
        {
            // Block
        TEcriture tecritureNode2;
        PMessageAdd pmessageaddNode3;
        tecritureNode2 = (TEcriture)nodeArrayList1.get(0);
        pmessageaddNode3 = (PMessageAdd)nodeArrayList2.get(0);

        pprintNode1 = new ASinglePrint(tecritureNode2, pmessageaddNode3);
        }
	nodeList.add(pprintNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ASequenceMessage */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessage pmessageNode1;
        {
            // Block
        TConcat tconcatNode2;
        TCaracteres tcaracteresNode3;
        TConcat tconcatNode4;
        TIdentifiant tidentifiantNode5;
        tconcatNode2 = (TConcat)nodeArrayList1.get(0);
        tcaracteresNode3 = (TCaracteres)nodeArrayList2.get(0);
        tconcatNode4 = (TConcat)nodeArrayList3.get(0);
        tidentifiantNode5 = (TIdentifiant)nodeArrayList4.get(0);

        pmessageNode1 = new ASequenceMessage(tconcatNode2, tcaracteresNode3, tconcatNode4, tidentifiantNode5);
        }
	nodeList.add(pmessageNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMessageAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessageAdd pmessageaddNode1;
        {
            // Block
        TIdentifiant tidentifiantNode2;
        tidentifiantNode2 = (TIdentifiant)nodeArrayList1.get(0);

        pmessageaddNode1 = new AMessageAdd(tidentifiantNode2);
        }
	nodeList.add(pmessageaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AChaineMessageAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMessageAdd pmessageaddNode1;
        {
            // Block
        TCaracteres tcaracteresNode2;
        tcaracteresNode2 = (TCaracteres)nodeArrayList1.get(0);

        pmessageaddNode1 = new AChaineMessageAdd(tcaracteresNode2);
        }
	nodeList.add(pmessageaddNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASimpleStructureConditionnelle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructureConditionnelle pstructureconditionnelleNode1;
        {
            // Block
        PFormeSimple pformesimpleNode2;
        pformesimpleNode2 = (PFormeSimple)nodeArrayList1.get(0);

        pstructureconditionnelleNode1 = new ASimpleStructureConditionnelle(pformesimpleNode2);
        }
	nodeList.add(pstructureconditionnelleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ACompleteStructureConditionnelle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructureConditionnelle pstructureconditionnelleNode1;
        {
            // Block
        PFormeComplete pformecompleteNode2;
        pformecompleteNode2 = (PFormeComplete)nodeArrayList1.get(0);

        pstructureconditionnelleNode1 = new ACompleteStructureConditionnelle(pformecompleteNode2);
        }
	nodeList.add(pstructureconditionnelleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AGlobaleStructureConditionnelle */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStructureConditionnelle pstructureconditionnelleNode1;
        {
            // Block
        PFormeGlobale pformeglobaleNode2;
        pformeglobaleNode2 = (PFormeGlobale)nodeArrayList1.get(0);

        pstructureconditionnelleNode1 = new AGlobaleStructureConditionnelle(pformeglobaleNode2);
        }
	nodeList.add(pstructureconditionnelleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAformesimple1FormeSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeSimple pformesimpleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TFinsi tfinsiNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        }
        tfinsiNode6 = (TFinsi)nodeArrayList4.get(0);

        pformesimpleNode1 = new AFormeSimple(tsiNode2, pconditionNode3, talorsNode4, listNode5, tfinsiNode6);
        }
	nodeList.add(pformesimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AAformesimple2FormeSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeSimple pformesimpleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TFinsi tfinsiNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        tfinsiNode7 = (TFinsi)nodeArrayList5.get(0);

        pformesimpleNode1 = new AFormeSimple(tsiNode2, pconditionNode3, talorsNode4, listNode6, tfinsiNode7);
        }
	nodeList.add(pformesimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAformecomplete1FormeComplete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeComplete pformecompleteNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        PConditionAdditionnelles pconditionadditionnellesNode6;
        TFinsi tfinsiNode7;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        }
        pconditionadditionnellesNode6 = (PConditionAdditionnelles)nodeArrayList4.get(0);
        tfinsiNode7 = (TFinsi)nodeArrayList5.get(0);

        pformecompleteNode1 = new AFormeComplete(tsiNode2, pconditionNode3, talorsNode4, listNode5, pconditionadditionnellesNode6, tfinsiNode7);
        }
	nodeList.add(pformecompleteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AAformecomplete2FormeComplete */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeComplete pformecompleteNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        PConditionAdditionnelles pconditionadditionnellesNode7;
        TFinsi tfinsiNode8;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        pconditionadditionnellesNode7 = (PConditionAdditionnelles)nodeArrayList5.get(0);
        tfinsiNode8 = (TFinsi)nodeArrayList6.get(0);

        pformecompleteNode1 = new AFormeComplete(tsiNode2, pconditionNode3, talorsNode4, listNode6, pconditionadditionnellesNode7, tfinsiNode8);
        }
	nodeList.add(pformecompleteNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AAformeglobale1FormeGlobale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeGlobale pformeglobaleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode8 = null;
        TFinsi tfinsiNode9;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        tfinsiNode9 = (TFinsi)nodeArrayList5.get(0);

        pformeglobaleNode1 = new AFormeGlobale(tsiNode2, pconditionNode3, talorsNode4, listNode5, listNode7, null, tfinsiNode9);
        }
	nodeList.add(pformeglobaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AAformeglobale2FormeGlobale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeGlobale pformeglobaleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode9 = null;
        TFinsi tfinsiNode10;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        tfinsiNode10 = (TFinsi)nodeArrayList6.get(0);

        pformeglobaleNode1 = new AFormeGlobale(tsiNode2, pconditionNode3, talorsNode4, listNode6, listNode8, null, tfinsiNode10);
        }
	nodeList.add(pformeglobaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AAformeglobale3FormeGlobale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeGlobale pformeglobaleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        PConditionAdditionnelles pconditionadditionnellesNode8;
        TFinsi tfinsiNode9;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        pconditionadditionnellesNode8 = (PConditionAdditionnelles)nodeArrayList5.get(0);
        tfinsiNode9 = (TFinsi)nodeArrayList6.get(0);

        pformeglobaleNode1 = new AFormeGlobale(tsiNode2, pconditionNode3, talorsNode4, listNode5, listNode7, pconditionadditionnellesNode8, tfinsiNode9);
        }
	nodeList.add(pformeglobaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AAformeglobale4FormeGlobale */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormeGlobale pformeglobaleNode1;
        {
            // Block
        TSi tsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        PConditionAdditionnelles pconditionadditionnellesNode9;
        TFinsi tfinsiNode10;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        pconditionadditionnellesNode9 = (PConditionAdditionnelles)nodeArrayList6.get(0);
        tfinsiNode10 = (TFinsi)nodeArrayList7.get(0);

        pformeglobaleNode1 = new AFormeGlobale(tsiNode2, pconditionNode3, talorsNode4, listNode6, listNode8, pconditionadditionnellesNode9, tfinsiNode10);
        }
	nodeList.add(pformeglobaleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AAconditionadditionnelles1ConditionAdditionnelles */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionAdditionnelles pconditionadditionnellesNode1;
        {
            // Block
        TSinon tsinonNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        {
            // Block
        }

        pconditionadditionnellesNode1 = new AConditionAdditionnelles(tsinonNode2, listNode3);
        }
	nodeList.add(pconditionadditionnellesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAconditionadditionnelles2ConditionAdditionnelles */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionAdditionnelles pconditionadditionnellesNode1;
        {
            // Block
        TSinon tsinonNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pconditionadditionnellesNode1 = new AConditionAdditionnelles(tsinonNode2, listNode4);
        }
	nodeList.add(pconditionadditionnellesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AAsinonsi1Sinonsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinonsi psinonsiNode1;
        {
            // Block
        TSinonsi tsinonsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        tsinonsiNode2 = (TSinonsi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        }

        psinonsiNode1 = new ASinonsi(tsinonsiNode2, pconditionNode3, talorsNode4, listNode5);
        }
	nodeList.add(psinonsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAsinonsi2Sinonsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSinonsi psinonsiNode1;
        {
            // Block
        TSinonsi tsinonsiNode2;
        PCondition pconditionNode3;
        TAlors talorsNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tsinonsiNode2 = (TSinonsi)nodeArrayList1.get(0);
        pconditionNode3 = (PCondition)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        psinonsiNode1 = new ASinonsi(tsinonsiNode2, pconditionNode3, talorsNode4, listNode6);
        }
	nodeList.add(psinonsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ASimpleCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PConditionSimple pconditionsimpleNode2;
        pconditionsimpleNode2 = (PConditionSimple)nodeArrayList1.get(0);

        pconditionNode1 = new ASimpleCondition(pconditionsimpleNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AComposeCondition */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondition pconditionNode1;
        {
            // Block
        PConditionCompose pconditioncomposeNode2;
        pconditioncomposeNode2 = (PConditionCompose)nodeArrayList1.get(0);

        pconditionNode1 = new AComposeCondition(pconditioncomposeNode2);
        }
	nodeList.add(pconditionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AInferieurConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurInferieur toperateurinferieurNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateurinferieurNode3 = (TOperateurInferieur)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new AInferieurConditionSimple(ptermeNode2, toperateurinferieurNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ASuperieurConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurSuperieur toperateursuperieurNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateursuperieurNode3 = (TOperateurSuperieur)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new ASuperieurConditionSimple(ptermeNode2, toperateursuperieurNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ADifferentConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurDifferent toperateurdifferentNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateurdifferentNode3 = (TOperateurDifferent)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new ADifferentConditionSimple(ptermeNode2, toperateurdifferentNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AEgalConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurEgal toperateuregalNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateuregalNode3 = (TOperateurEgal)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new AEgalConditionSimple(ptermeNode2, toperateuregalNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ASupegalConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurSuperieurEgal toperateursuperieuregalNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateursuperieuregalNode3 = (TOperateurSuperieurEgal)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new ASupegalConditionSimple(ptermeNode2, toperateursuperieuregalNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AInfegalConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        PTerme ptermeNode2;
        TOperateurInferieurEgal toperateurinferieuregalNode3;
        PTerme ptermeNode4;
        ptermeNode2 = (PTerme)nodeArrayList1.get(0);
        toperateurinferieuregalNode3 = (TOperateurInferieurEgal)nodeArrayList2.get(0);
        ptermeNode4 = (PTerme)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new AInfegalConditionSimple(ptermeNode2, toperateurinferieuregalNode3, ptermeNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AParentheseConditionSimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionSimple pconditionsimpleNode1;
        {
            // Block
        TParentheseO tparentheseoNode2;
        PConditionSimple pconditionsimpleNode3;
        TParentheseF tparenthesefNode4;
        tparentheseoNode2 = (TParentheseO)nodeArrayList1.get(0);
        pconditionsimpleNode3 = (PConditionSimple)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParentheseF)nodeArrayList3.get(0);

        pconditionsimpleNode1 = new AParentheseConditionSimple(tparentheseoNode2, pconditionsimpleNode3, tparenthesefNode4);
        }
	nodeList.add(pconditionsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AEtConditionCompose */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionCompose pconditioncomposeNode1;
        {
            // Block
        PConditionSimple pconditionsimpleNode2;
        TOperateurEt toperateuretNode3;
        PConditionSimple pconditionsimpleNode4;
        pconditionsimpleNode2 = (PConditionSimple)nodeArrayList1.get(0);
        toperateuretNode3 = (TOperateurEt)nodeArrayList2.get(0);
        pconditionsimpleNode4 = (PConditionSimple)nodeArrayList3.get(0);

        pconditioncomposeNode1 = new AEtConditionCompose(pconditionsimpleNode2, toperateuretNode3, pconditionsimpleNode4);
        }
	nodeList.add(pconditioncomposeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AOuConditionCompose */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionCompose pconditioncomposeNode1;
        {
            // Block
        PConditionSimple pconditionsimpleNode2;
        TOperateurOu toperateurouNode3;
        PConditionSimple pconditionsimpleNode4;
        pconditionsimpleNode2 = (PConditionSimple)nodeArrayList1.get(0);
        toperateurouNode3 = (TOperateurOu)nodeArrayList2.get(0);
        pconditionsimpleNode4 = (PConditionSimple)nodeArrayList3.get(0);

        pconditioncomposeNode1 = new AOuConditionCompose(pconditionsimpleNode2, toperateurouNode3, pconditionsimpleNode4);
        }
	nodeList.add(pconditioncomposeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AConditionCompose */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PConditionCompose pconditioncomposeNode1;
        {
            // Block
        TParentheseO tparentheseoNode2;
        PConditionCompose pconditioncomposeNode3;
        TParentheseF tparenthesefNode4;
        tparentheseoNode2 = (TParentheseO)nodeArrayList1.get(0);
        pconditioncomposeNode3 = (PConditionCompose)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParentheseF)nodeArrayList3.get(0);

        pconditioncomposeNode1 = new AConditionCompose(tparentheseoNode2, pconditioncomposeNode3, tparenthesefNode4);
        }
	nodeList.add(pconditioncomposeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$Instructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PInstructions pinstructionsNode1;
        pinstructionsNode1 = (PInstructions)nodeArrayList1.get(0);
	if(pinstructionsNode1 != null)
	{
	  listNode2.add(pinstructionsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$Instructions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PInstructions pinstructionsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pinstructionsNode2 = (PInstructions)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pinstructionsNode2 != null)
	{
	  listNode3.add(pinstructionsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$DefAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDefAdd pdefaddNode1;
        pdefaddNode1 = (PDefAdd)nodeArrayList1.get(0);
	if(pdefaddNode1 != null)
	{
	  listNode2.add(pdefaddNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$DefAdd */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDefAdd pdefaddNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdefaddNode2 = (PDefAdd)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdefaddNode2 != null)
	{
	  listNode3.add(pdefaddNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Prefixe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PPrefixe pprefixeNode1;
        pprefixeNode1 = (PPrefixe)nodeArrayList1.get(0);
	if(pprefixeNode1 != null)
	{
	  listNode2.add(pprefixeNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Prefixe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PPrefixe pprefixeNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pprefixeNode2 = (PPrefixe)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pprefixeNode2 != null)
	{
	  listNode3.add(pprefixeNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$Message */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMessage pmessageNode1;
        pmessageNode1 = (PMessage)nodeArrayList1.get(0);
	if(pmessageNode1 != null)
	{
	  listNode2.add(pmessageNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$Message */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMessage pmessageNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmessageNode2 = (PMessage)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmessageNode2 != null)
	{
	  listNode3.add(pmessageNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$Sinonsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PSinonsi psinonsiNode1;
        psinonsiNode1 = (PSinonsi)nodeArrayList1.get(0);
	if(psinonsiNode1 != null)
	{
	  listNode2.add(psinonsiNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$Sinonsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PSinonsi psinonsiNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        psinonsiNode2 = (PSinonsi)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(psinonsiNode2 != null)
	{
	  listNode3.add(psinonsiNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 2}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {19, SHIFT, 4}, },
			{{-1, ERROR, 2}, {39, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {3, SHIFT, 6}, },
			{{-1, ERROR, 4}, {8, SHIFT, 7}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 6}, {4, SHIFT, 15}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, ERROR, 7}, {5, SHIFT, 29}, {6, SHIFT, 30}, {7, SHIFT, 31}, {17, SHIFT, 32}, },
			{{-1, ERROR, 8}, {19, SHIFT, 34}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 10}, {8, SHIFT, 7}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 4}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 5}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 8}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 16}, {18, SHIFT, 39}, {19, SHIFT, 40}, },
			{{-1, ERROR, 17}, {19, SHIFT, 42}, },
			{{-1, ERROR, 18}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 45}, },
			{{-1, ERROR, 19}, {34, SHIFT, 50}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 38}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 28}, {4, SHIFT, 51}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 6}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 36}, {35, SHIFT, 53}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 31}, {36, SHIFT, 8}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 45}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 45}, },
			{{-1, ERROR, 46}, {26, SHIFT, 62}, {27, SHIFT, 63}, {28, SHIFT, 64}, {29, SHIFT, 65}, {30, SHIFT, 66}, {31, SHIFT, 67}, },
			{{-1, ERROR, 47}, {14, SHIFT, 68}, },
			{{-1, REDUCE, 53}, {32, SHIFT, 69}, {33, SHIFT, 70}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 50}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 53}, {18, SHIFT, 74}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 33}, {35, SHIFT, 53}, },
			{{-1, REDUCE, 32}, {36, SHIFT, 8}, },
			{{-1, ERROR, 57}, {20, SHIFT, 76}, {21, SHIFT, 77}, {38, SHIFT, 78}, },
			{{-1, REDUCE, 20}, {22, SHIFT, 79}, {23, SHIFT, 80}, {24, SHIFT, 81}, {25, SHIFT, 82}, },
			{{-1, REDUCE, 23}, {26, SHIFT, 62}, {27, SHIFT, 63}, {28, SHIFT, 64}, {29, SHIFT, 65}, {30, SHIFT, 66}, {31, SHIFT, 67}, },
			{{-1, ERROR, 60}, {32, SHIFT, 69}, {33, SHIFT, 70}, {38, SHIFT, 83}, },
			{{-1, ERROR, 61}, {38, SHIFT, 84}, },
			{{-1, ERROR, 62}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 63}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 64}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 65}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 66}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 67}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 68}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {12, SHIFT, 91}, {13, SHIFT, 92}, {15, SHIFT, 93}, {19, SHIFT, 19}, },
			{{-1, ERROR, 69}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 98}, },
			{{-1, ERROR, 70}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 98}, },
			{{-1, ERROR, 71}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, REDUCE, 19}, {20, SHIFT, 76}, {21, SHIFT, 77}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 74}, {35, SHIFT, 101}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 76}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 77}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 79}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 80}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 81}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, ERROR, 82}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 71}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 49}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, ERROR, 92}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 45}, },
			{{-1, REDUCE, 41}, },
			{{-1, ERROR, 94}, {15, SHIFT, 110}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 96}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {12, SHIFT, 91}, {13, SHIFT, 92}, {15, SHIFT, 111}, {19, SHIFT, 19}, },
			{{-1, ERROR, 97}, {12, SHIFT, 91}, {13, SHIFT, 92}, {15, SHIFT, 114}, },
			{{-1, ERROR, 98}, {16, SHIFT, 43}, {19, SHIFT, 44}, {37, SHIFT, 98}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 101}, {19, SHIFT, 118}, },
			{{-1, REDUCE, 22}, {22, SHIFT, 79}, {23, SHIFT, 80}, {24, SHIFT, 81}, {25, SHIFT, 82}, },
			{{-1, REDUCE, 21}, {22, SHIFT, 79}, {23, SHIFT, 80}, {24, SHIFT, 81}, {25, SHIFT, 82}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 50}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, ERROR, 109}, {14, SHIFT, 119}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 42}, },
			{{-1, ERROR, 112}, {15, SHIFT, 120}, },
			{{-1, ERROR, 113}, {12, SHIFT, 91}, {13, SHIFT, 92}, {15, SHIFT, 121}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 115}, {15, SHIFT, 123}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 117}, {38, SHIFT, 83}, },
			{{-1, REDUCE, 35}, },
			{{-1, REDUCE, 51}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 122}, {15, SHIFT, 125}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 52}, {9, SHIFT, 16}, {10, SHIFT, 17}, {11, SHIFT, 18}, {19, SHIFT, 19}, },
			{{-1, REDUCE, 48}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 5}, },
			{{-1, 9}, {13, 37}, {36, 37}, },
			{{-1, 10}, },
			{{-1, 11}, {14, 38}, {56, 38}, },
			{{-1, 12}, {10, 35}, },
			{{-1, 33}, },
			{{-1, 20}, {28, 52}, {96, 52}, {108, 52}, {124, 52}, },
			{{-1, 21}, },
			{{-1, 57}, {50, 72}, },
			{{-1, 58}, {76, 102}, {77, 103}, },
			{{-1, 73}, {18, 46}, {45, 59}, {62, 85}, {63, 86}, {64, 87}, {65, 88}, {66, 89}, {67, 90}, {69, 46}, {70, 46}, {79, 104}, {80, 105}, {81, 106}, {82, 107}, {92, 46}, {98, 59}, },
			{{-1, 22}, },
			{{-1, 23}, },
			{{-1, 54}, {55, 75}, },
			{{-1, 41}, },
			{{-1, 24}, },
			{{-1, 25}, },
			{{-1, 26}, },
			{{-1, 27}, },
			{{-1, 94}, {96, 112}, {97, 115}, {113, 122}, },
			{{-1, 95}, {97, 116}, {113, 116}, },
			{{-1, 47}, {92, 109}, },
			{{-1, 48}, {45, 60}, {69, 99}, {70, 100}, {98, 117}, },
			{{-1, 49}, {45, 61}, },
			{{-1, 28}, {68, 96}, {91, 108}, {119, 124}, },
			{{-1, 13}, {12, 36}, },
			{{-1, 14}, {42, 56}, },
			{{-1, 55}, },
			{{-1, 97}, {96, 113}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'variables', 'debut'",
			"expecting: identifiant",
			"expecting: EOF",
			"expecting: 'debut'",
			"expecting: 'en', ','",
			"expecting: 'fin', 'ecrire', 'lire', 'si', identifiant",
			"expecting: 'entier', 'reel', 'byte', 'caractere'",
			"expecting: 'debut', ','",
			"expecting: 'en'",
			"expecting: 'fin', 'en', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant, ','",
			"expecting: '"tout_caractere"', identifiant",
			"expecting: numerique, identifiant, '('",
			"expecting: '<--'",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant, '&'",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant, ','",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'alors', 'finsi', identifiant, '-', '+', '*', '/', 'mod', '^', '>', '<', '>=', '=>', '=', '<>', 'et', 'ou', ')'",
			"expecting: '>', '<', '>=', '=>', '=', '<>'",
			"expecting: 'alors'",
			"expecting: 'alors', 'et', 'ou'",
			"expecting: '"tout_caractere"'",
			"expecting: '-', '+', ')'",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant, '-', '+', '*', '/', 'mod', '^', ')'",
			"expecting: '-', '+', '*', '/', 'mod', '^', '>', '<', '>=', '=>', '=', '<>', ')'",
			"expecting: 'et', 'ou', ')'",
			"expecting: ')'",
			"expecting: 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant",
			"expecting: 'fin', 'ecrire', 'lire', 'si', 'sinon', 'sinonsi', 'finsi', identifiant, '-', '+'",
			"expecting: '&'",
			"expecting: 'alors', 'et', 'ou', ')'",
			"expecting: 'alors', ')'",
			"expecting: 'ecrire', 'lire', 'si', 'finsi', identifiant",
			"expecting: 'finsi'",
			"expecting: 'sinon', 'sinonsi', 'finsi'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 3, 5, 6, 1, 7, 8, 9, 7, 7, 4, 2, 10, 1, 11, 12, 13, 13, 13, 13, 13, 13, 13, 13, 5, 7, 7, 7, 7, 7, 9, 7, 7, 7, 9, 13, 14, 13, 15, 16, 16, 11, 17, 18, 19, 18, 11, 2, 13, 20, 14, 14, 15, 21, 22, 23, 24, 25, 11, 11, 11, 11, 11, 11, 26, 11, 11, 11, 27, 22, 28, 14, 11, 11, 16, 11, 11, 11, 11, 29, 30, 29, 29, 29, 29, 29, 29, 31, 11, 13, 32, 33, 26, 33, 11, 30, 30, 1, 22, 22, 22, 22, 22, 22, 31, 18, 13, 13, 32, 33, 13, 32, 33, 25, 14, 26, 13, 13, 32, 13, 26, 13, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
