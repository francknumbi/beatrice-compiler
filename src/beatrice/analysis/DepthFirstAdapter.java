/* This file was generated by SableCC (http://www.sablecc.org/). */

package beatrice.analysis;

import java.util.*;
import beatrice.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgramme().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAAlgorithmeProgramme(AAlgorithmeProgramme node)
    {
        defaultIn(node);
    }

    public void outAAlgorithmeProgramme(AAlgorithmeProgramme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAlgorithmeProgramme(AAlgorithmeProgramme node)
    {
        inAAlgorithmeProgramme(node);
        if(node.getNomAlgorithme() != null)
        {
            node.getNomAlgorithme().apply(this);
        }
        if(node.getEntete() != null)
        {
            node.getEntete().apply(this);
        }
        if(node.getDebut() != null)
        {
            node.getDebut().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFin() != null)
        {
            node.getFin().apply(this);
        }
        outAAlgorithmeProgramme(node);
    }

    public void inANomAlgorithme(ANomAlgorithme node)
    {
        defaultIn(node);
    }

    public void outANomAlgorithme(ANomAlgorithme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANomAlgorithme(ANomAlgorithme node)
    {
        inANomAlgorithme(node);
        if(node.getAlgorithme() != null)
        {
            node.getAlgorithme().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outANomAlgorithme(node);
    }

    public void inAVideEntete(AVideEntete node)
    {
        defaultIn(node);
    }

    public void outAVideEntete(AVideEntete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVideEntete(AVideEntete node)
    {
        inAVideEntete(node);
        outAVideEntete(node);
    }

    public void inADefinitionEntete(ADefinitionEntete node)
    {
        defaultIn(node);
    }

    public void outADefinitionEntete(ADefinitionEntete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefinitionEntete(ADefinitionEntete node)
    {
        inADefinitionEntete(node);
        if(node.getVariables() != null)
        {
            node.getVariables().apply(this);
        }
        if(node.getVariableDeclaration() != null)
        {
            node.getVariableDeclaration().apply(this);
        }
        outADefinitionEntete(node);
    }

    public void inASingleVariableDeclaration(ASingleVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outASingleVariableDeclaration(ASingleVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASingleVariableDeclaration(ASingleVariableDeclaration node)
    {
        inASingleVariableDeclaration(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getSuffixe() != null)
        {
            node.getSuffixe().apply(this);
        }
        outASingleVariableDeclaration(node);
    }

    public void inASequenceVariableDeclaration(ASequenceVariableDeclaration node)
    {
        defaultIn(node);
    }

    public void outASequenceVariableDeclaration(ASequenceVariableDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequenceVariableDeclaration(ASequenceVariableDeclaration node)
    {
        inASequenceVariableDeclaration(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getSuffixe() != null)
        {
            node.getSuffixe().apply(this);
        }
        {
            List<PDefAdd> copy = new ArrayList<PDefAdd>(node.getDefAdd());
            for(PDefAdd e : copy)
            {
                e.apply(this);
            }
        }
        outASequenceVariableDeclaration(node);
    }

    public void inADefAdd(ADefAdd node)
    {
        defaultIn(node);
    }

    public void outADefAdd(ADefAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADefAdd(ADefAdd node)
    {
        inADefAdd(node);
        if(node.getPrefixeCompose() != null)
        {
            node.getPrefixeCompose().apply(this);
        }
        if(node.getSuffixe() != null)
        {
            node.getSuffixe().apply(this);
        }
        outADefAdd(node);
    }

    public void inAPrefixeCompose(APrefixeCompose node)
    {
        defaultIn(node);
    }

    public void outAPrefixeCompose(APrefixeCompose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixeCompose(APrefixeCompose node)
    {
        inAPrefixeCompose(node);
        {
            List<PPrefixe> copy = new ArrayList<PPrefixe>(node.getPrefixe());
            for(PPrefixe e : copy)
            {
                e.apply(this);
            }
        }
        outAPrefixeCompose(node);
    }

    public void inAPrefixe(APrefixe node)
    {
        defaultIn(node);
    }

    public void outAPrefixe(APrefixe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrefixe(APrefixe node)
    {
        inAPrefixe(node);
        if(node.getSeparateur() != null)
        {
            node.getSeparateur().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outAPrefixe(node);
    }

    public void inASuffixe(ASuffixe node)
    {
        defaultIn(node);
    }

    public void outASuffixe(ASuffixe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuffixe(ASuffixe node)
    {
        inASuffixe(node);
        if(node.getDef() != null)
        {
            node.getDef().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outASuffixe(node);
    }

    public void inACaractereType(ACaractereType node)
    {
        defaultIn(node);
    }

    public void outACaractereType(ACaractereType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACaractereType(ACaractereType node)
    {
        inACaractereType(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACaractereType(node);
    }

    public void inAEntierType(AEntierType node)
    {
        defaultIn(node);
    }

    public void outAEntierType(AEntierType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEntierType(AEntierType node)
    {
        inAEntierType(node);
        if(node.getEntier() != null)
        {
            node.getEntier().apply(this);
        }
        outAEntierType(node);
    }

    public void inAByteType(AByteType node)
    {
        defaultIn(node);
    }

    public void outAByteType(AByteType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAByteType(AByteType node)
    {
        inAByteType(node);
        if(node.getByte() != null)
        {
            node.getByte().apply(this);
        }
        outAByteType(node);
    }

    public void inAReelType(AReelType node)
    {
        defaultIn(node);
    }

    public void outAReelType(AReelType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReelType(AReelType node)
    {
        inAReelType(node);
        if(node.getReel() != null)
        {
            node.getReel().apply(this);
        }
        outAReelType(node);
    }

    public void inAAfficherInstructions(AAfficherInstructions node)
    {
        defaultIn(node);
    }

    public void outAAfficherInstructions(AAfficherInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAfficherInstructions(AAfficherInstructions node)
    {
        inAAfficherInstructions(node);
        if(node.getPrint() != null)
        {
            node.getPrint().apply(this);
        }
        outAAfficherInstructions(node);
    }

    public void inAEcritureInstructions(AEcritureInstructions node)
    {
        defaultIn(node);
    }

    public void outAEcritureInstructions(AEcritureInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEcritureInstructions(AEcritureInstructions node)
    {
        inAEcritureInstructions(node);
        if(node.getInput() != null)
        {
            node.getInput().apply(this);
        }
        outAEcritureInstructions(node);
    }

    public void inAConditionnelleInstructions(AConditionnelleInstructions node)
    {
        defaultIn(node);
    }

    public void outAConditionnelleInstructions(AConditionnelleInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionnelleInstructions(AConditionnelleInstructions node)
    {
        inAConditionnelleInstructions(node);
        if(node.getStructureConditionnelle() != null)
        {
            node.getStructureConditionnelle().apply(this);
        }
        outAConditionnelleInstructions(node);
    }

    public void inAInstructions(AInstructions node)
    {
        defaultIn(node);
    }

    public void outAInstructions(AInstructions node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstructions(AInstructions node)
    {
        inAInstructions(node);
        if(node.getAffectation() != null)
        {
            node.getAffectation().apply(this);
        }
        outAInstructions(node);
    }

    public void inAAffectation(AAffectation node)
    {
        defaultIn(node);
    }

    public void outAAffectation(AAffectation node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAffectation(AAffectation node)
    {
        inAAffectation(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        if(node.getOperateurAffectation() != null)
        {
            node.getOperateurAffectation().apply(this);
        }
        if(node.getExpress() != null)
        {
            node.getExpress().apply(this);
        }
        outAAffectation(node);
    }

    public void inAExpress(AExpress node)
    {
        defaultIn(node);
    }

    public void outAExpress(AExpress node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpress(AExpress node)
    {
        inAExpress(node);
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        outAExpress(node);
    }

    public void inAAdditionExpress(AAdditionExpress node)
    {
        defaultIn(node);
    }

    public void outAAdditionExpress(AAdditionExpress node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditionExpress(AAdditionExpress node)
    {
        inAAdditionExpress(node);
        if(node.getExpress() != null)
        {
            node.getExpress().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        outAAdditionExpress(node);
    }

    public void inASoustractionExpress(ASoustractionExpress node)
    {
        defaultIn(node);
    }

    public void outASoustractionExpress(ASoustractionExpress node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASoustractionExpress(ASoustractionExpress node)
    {
        inASoustractionExpress(node);
        if(node.getExpress() != null)
        {
            node.getExpress().apply(this);
        }
        if(node.getMoins() != null)
        {
            node.getMoins().apply(this);
        }
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        outASoustractionExpress(node);
    }

    public void inAModuloFacteur(AModuloFacteur node)
    {
        defaultIn(node);
    }

    public void outAModuloFacteur(AModuloFacteur node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModuloFacteur(AModuloFacteur node)
    {
        inAModuloFacteur(node);
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        if(node.getOperateurModulo() != null)
        {
            node.getOperateurModulo().apply(this);
        }
        if(node.getTerme() != null)
        {
            node.getTerme().apply(this);
        }
        outAModuloFacteur(node);
    }

    public void inATermeFacteur(ATermeFacteur node)
    {
        defaultIn(node);
    }

    public void outATermeFacteur(ATermeFacteur node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermeFacteur(ATermeFacteur node)
    {
        inATermeFacteur(node);
        if(node.getTerme() != null)
        {
            node.getTerme().apply(this);
        }
        outATermeFacteur(node);
    }

    public void inAMultiplicationFacteur(AMultiplicationFacteur node)
    {
        defaultIn(node);
    }

    public void outAMultiplicationFacteur(AMultiplicationFacteur node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultiplicationFacteur(AMultiplicationFacteur node)
    {
        inAMultiplicationFacteur(node);
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getTerme() != null)
        {
            node.getTerme().apply(this);
        }
        outAMultiplicationFacteur(node);
    }

    public void inADivisionFacteur(ADivisionFacteur node)
    {
        defaultIn(node);
    }

    public void outADivisionFacteur(ADivisionFacteur node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivisionFacteur(ADivisionFacteur node)
    {
        inADivisionFacteur(node);
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getTerme() != null)
        {
            node.getTerme().apply(this);
        }
        outADivisionFacteur(node);
    }

    public void inAPuissanceFacteur(APuissanceFacteur node)
    {
        defaultIn(node);
    }

    public void outAPuissanceFacteur(APuissanceFacteur node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPuissanceFacteur(APuissanceFacteur node)
    {
        inAPuissanceFacteur(node);
        if(node.getFacteur() != null)
        {
            node.getFacteur().apply(this);
        }
        if(node.getPuissance() != null)
        {
            node.getPuissance().apply(this);
        }
        if(node.getTerme() != null)
        {
            node.getTerme().apply(this);
        }
        outAPuissanceFacteur(node);
    }

    public void inAValeurEntiereTerme(AValeurEntiereTerme node)
    {
        defaultIn(node);
    }

    public void outAValeurEntiereTerme(AValeurEntiereTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValeurEntiereTerme(AValeurEntiereTerme node)
    {
        inAValeurEntiereTerme(node);
        if(node.getNombreEntier() != null)
        {
            node.getNombreEntier().apply(this);
        }
        outAValeurEntiereTerme(node);
    }

    public void inAValeurReelTerme(AValeurReelTerme node)
    {
        defaultIn(node);
    }

    public void outAValeurReelTerme(AValeurReelTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAValeurReelTerme(AValeurReelTerme node)
    {
        inAValeurReelTerme(node);
        if(node.getNombreReel() != null)
        {
            node.getNombreReel().apply(this);
        }
        outAValeurReelTerme(node);
    }

    public void inAIdentifiantTerme(AIdentifiantTerme node)
    {
        defaultIn(node);
    }

    public void outAIdentifiantTerme(AIdentifiantTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdentifiantTerme(AIdentifiantTerme node)
    {
        inAIdentifiantTerme(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outAIdentifiantTerme(node);
    }

    public void inAChaineTerme(AChaineTerme node)
    {
        defaultIn(node);
    }

    public void outAChaineTerme(AChaineTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChaineTerme(AChaineTerme node)
    {
        inAChaineTerme(node);
        if(node.getCaracteres() != null)
        {
            node.getCaracteres().apply(this);
        }
        outAChaineTerme(node);
    }

    public void inAConcatenationTerme(AConcatenationTerme node)
    {
        defaultIn(node);
    }

    public void outAConcatenationTerme(AConcatenationTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConcatenationTerme(AConcatenationTerme node)
    {
        inAConcatenationTerme(node);
        if(node.getMessageAdd() != null)
        {
            node.getMessageAdd().apply(this);
        }
        {
            List<PMessage> copy = new ArrayList<PMessage>(node.getMessage());
            for(PMessage e : copy)
            {
                e.apply(this);
            }
        }
        outAConcatenationTerme(node);
    }

    public void inAParenthesesTerme(AParenthesesTerme node)
    {
        defaultIn(node);
    }

    public void outAParenthesesTerme(AParenthesesTerme node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParenthesesTerme(AParenthesesTerme node)
    {
        inAParenthesesTerme(node);
        if(node.getParentheseO() != null)
        {
            node.getParentheseO().apply(this);
        }
        if(node.getExpress() != null)
        {
            node.getExpress().apply(this);
        }
        if(node.getParentheseF() != null)
        {
            node.getParentheseF().apply(this);
        }
        outAParenthesesTerme(node);
    }

    public void inAInput(AInput node)
    {
        defaultIn(node);
    }

    public void outAInput(AInput node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInput(AInput node)
    {
        inAInput(node);
        if(node.getLecture() != null)
        {
            node.getLecture().apply(this);
        }
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        {
            List<PPrefixe> copy = new ArrayList<PPrefixe>(node.getPrefixe());
            for(PPrefixe e : copy)
            {
                e.apply(this);
            }
        }
        outAInput(node);
    }

    public void inASequencePrint(ASequencePrint node)
    {
        defaultIn(node);
    }

    public void outASequencePrint(ASequencePrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASequencePrint(ASequencePrint node)
    {
        inASequencePrint(node);
        if(node.getEcriture() != null)
        {
            node.getEcriture().apply(this);
        }
        if(node.getMessageAdd() != null)
        {
            node.getMessageAdd().apply(this);
        }
        {
            List<PMessage> copy = new ArrayList<PMessage>(node.getMessage());
            for(PMessage e : copy)
            {
                e.apply(this);
            }
        }
        outASequencePrint(node);
    }

    public void inASinglePrint(ASinglePrint node)
    {
        defaultIn(node);
    }

    public void outASinglePrint(ASinglePrint node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinglePrint(ASinglePrint node)
    {
        inASinglePrint(node);
        if(node.getEcriture() != null)
        {
            node.getEcriture().apply(this);
        }
        if(node.getMessageAdd() != null)
        {
            node.getMessageAdd().apply(this);
        }
        outASinglePrint(node);
    }

    public void inAMessage(AMessage node)
    {
        defaultIn(node);
    }

    public void outAMessage(AMessage node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMessage(AMessage node)
    {
        inAMessage(node);
        if(node.getConcat() != null)
        {
            node.getConcat().apply(this);
        }
        if(node.getMessageAdd() != null)
        {
            node.getMessageAdd().apply(this);
        }
        outAMessage(node);
    }

    public void inAMessageAdd(AMessageAdd node)
    {
        defaultIn(node);
    }

    public void outAMessageAdd(AMessageAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMessageAdd(AMessageAdd node)
    {
        inAMessageAdd(node);
        if(node.getIdentifiant() != null)
        {
            node.getIdentifiant().apply(this);
        }
        outAMessageAdd(node);
    }

    public void inAChaineMessageAdd(AChaineMessageAdd node)
    {
        defaultIn(node);
    }

    public void outAChaineMessageAdd(AChaineMessageAdd node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAChaineMessageAdd(AChaineMessageAdd node)
    {
        inAChaineMessageAdd(node);
        if(node.getCaracteres() != null)
        {
            node.getCaracteres().apply(this);
        }
        outAChaineMessageAdd(node);
    }

    public void inASimpleStructureConditionnelle(ASimpleStructureConditionnelle node)
    {
        defaultIn(node);
    }

    public void outASimpleStructureConditionnelle(ASimpleStructureConditionnelle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStructureConditionnelle(ASimpleStructureConditionnelle node)
    {
        inASimpleStructureConditionnelle(node);
        if(node.getFormeSimple() != null)
        {
            node.getFormeSimple().apply(this);
        }
        outASimpleStructureConditionnelle(node);
    }

    public void inACompleteStructureConditionnelle(ACompleteStructureConditionnelle node)
    {
        defaultIn(node);
    }

    public void outACompleteStructureConditionnelle(ACompleteStructureConditionnelle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompleteStructureConditionnelle(ACompleteStructureConditionnelle node)
    {
        inACompleteStructureConditionnelle(node);
        if(node.getFormeComplete() != null)
        {
            node.getFormeComplete().apply(this);
        }
        outACompleteStructureConditionnelle(node);
    }

    public void inAGlobaleStructureConditionnelle(AGlobaleStructureConditionnelle node)
    {
        defaultIn(node);
    }

    public void outAGlobaleStructureConditionnelle(AGlobaleStructureConditionnelle node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGlobaleStructureConditionnelle(AGlobaleStructureConditionnelle node)
    {
        inAGlobaleStructureConditionnelle(node);
        if(node.getFormeGlobale() != null)
        {
            node.getFormeGlobale().apply(this);
        }
        outAGlobaleStructureConditionnelle(node);
    }

    public void inAFormeSimple(AFormeSimple node)
    {
        defaultIn(node);
    }

    public void outAFormeSimple(AFormeSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormeSimple(AFormeSimple node)
    {
        inAFormeSimple(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getFinsi() != null)
        {
            node.getFinsi().apply(this);
        }
        outAFormeSimple(node);
    }

    public void inAFormeComplete(AFormeComplete node)
    {
        defaultIn(node);
    }

    public void outAFormeComplete(AFormeComplete node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormeComplete(AFormeComplete node)
    {
        inAFormeComplete(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getConditionAdditionnelles() != null)
        {
            node.getConditionAdditionnelles().apply(this);
        }
        if(node.getFinsi() != null)
        {
            node.getFinsi().apply(this);
        }
        outAFormeComplete(node);
    }

    public void inAFormeGlobale(AFormeGlobale node)
    {
        defaultIn(node);
    }

    public void outAFormeGlobale(AFormeGlobale node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFormeGlobale(AFormeGlobale node)
    {
        inAFormeGlobale(node);
        if(node.getSi() != null)
        {
            node.getSi().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PSinonsi> copy = new ArrayList<PSinonsi>(node.getSinonsi());
            for(PSinonsi e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getConditionAdditionnelles() != null)
        {
            node.getConditionAdditionnelles().apply(this);
        }
        if(node.getFinsi() != null)
        {
            node.getFinsi().apply(this);
        }
        outAFormeGlobale(node);
    }

    public void inAConditionAdditionnelles(AConditionAdditionnelles node)
    {
        defaultIn(node);
    }

    public void outAConditionAdditionnelles(AConditionAdditionnelles node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionAdditionnelles(AConditionAdditionnelles node)
    {
        inAConditionAdditionnelles(node);
        if(node.getSinon() != null)
        {
            node.getSinon().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        outAConditionAdditionnelles(node);
    }

    public void inASinonsi(ASinonsi node)
    {
        defaultIn(node);
    }

    public void outASinonsi(ASinonsi node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASinonsi(ASinonsi node)
    {
        inASinonsi(node);
        if(node.getSinonsi() != null)
        {
            node.getSinonsi().apply(this);
        }
        if(node.getCondition() != null)
        {
            node.getCondition().apply(this);
        }
        if(node.getAlors() != null)
        {
            node.getAlors().apply(this);
        }
        {
            List<PInstructions> copy = new ArrayList<PInstructions>(node.getInstructions());
            for(PInstructions e : copy)
            {
                e.apply(this);
            }
        }
        outASinonsi(node);
    }

    public void inASimpleCondition(ASimpleCondition node)
    {
        defaultIn(node);
    }

    public void outASimpleCondition(ASimpleCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleCondition(ASimpleCondition node)
    {
        inASimpleCondition(node);
        if(node.getConditionSimple() != null)
        {
            node.getConditionSimple().apply(this);
        }
        outASimpleCondition(node);
    }

    public void inAComposeCondition(AComposeCondition node)
    {
        defaultIn(node);
    }

    public void outAComposeCondition(AComposeCondition node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComposeCondition(AComposeCondition node)
    {
        inAComposeCondition(node);
        if(node.getConditionCompose() != null)
        {
            node.getConditionCompose().apply(this);
        }
        outAComposeCondition(node);
    }

    public void inAInferieurConditionSimple(AInferieurConditionSimple node)
    {
        defaultIn(node);
    }

    public void outAInferieurConditionSimple(AInferieurConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInferieurConditionSimple(AInferieurConditionSimple node)
    {
        inAInferieurConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurInferieur() != null)
        {
            node.getOperateurInferieur().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outAInferieurConditionSimple(node);
    }

    public void inASuperieurConditionSimple(ASuperieurConditionSimple node)
    {
        defaultIn(node);
    }

    public void outASuperieurConditionSimple(ASuperieurConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASuperieurConditionSimple(ASuperieurConditionSimple node)
    {
        inASuperieurConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurSuperieur() != null)
        {
            node.getOperateurSuperieur().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outASuperieurConditionSimple(node);
    }

    public void inADifferentConditionSimple(ADifferentConditionSimple node)
    {
        defaultIn(node);
    }

    public void outADifferentConditionSimple(ADifferentConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADifferentConditionSimple(ADifferentConditionSimple node)
    {
        inADifferentConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurDifferent() != null)
        {
            node.getOperateurDifferent().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outADifferentConditionSimple(node);
    }

    public void inAEgalConditionSimple(AEgalConditionSimple node)
    {
        defaultIn(node);
    }

    public void outAEgalConditionSimple(AEgalConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEgalConditionSimple(AEgalConditionSimple node)
    {
        inAEgalConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurEgal() != null)
        {
            node.getOperateurEgal().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outAEgalConditionSimple(node);
    }

    public void inASupegalConditionSimple(ASupegalConditionSimple node)
    {
        defaultIn(node);
    }

    public void outASupegalConditionSimple(ASupegalConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASupegalConditionSimple(ASupegalConditionSimple node)
    {
        inASupegalConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurSuperieurEgal() != null)
        {
            node.getOperateurSuperieurEgal().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outASupegalConditionSimple(node);
    }

    public void inAInfegalConditionSimple(AInfegalConditionSimple node)
    {
        defaultIn(node);
    }

    public void outAInfegalConditionSimple(AInfegalConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInfegalConditionSimple(AInfegalConditionSimple node)
    {
        inAInfegalConditionSimple(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurInferieurEgal() != null)
        {
            node.getOperateurInferieurEgal().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outAInfegalConditionSimple(node);
    }

    public void inAParentheseConditionSimple(AParentheseConditionSimple node)
    {
        defaultIn(node);
    }

    public void outAParentheseConditionSimple(AParentheseConditionSimple node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParentheseConditionSimple(AParentheseConditionSimple node)
    {
        inAParentheseConditionSimple(node);
        if(node.getParentheseO() != null)
        {
            node.getParentheseO().apply(this);
        }
        if(node.getConditionSimple() != null)
        {
            node.getConditionSimple().apply(this);
        }
        if(node.getParentheseF() != null)
        {
            node.getParentheseF().apply(this);
        }
        outAParentheseConditionSimple(node);
    }

    public void inAEtConditionCompose(AEtConditionCompose node)
    {
        defaultIn(node);
    }

    public void outAEtConditionCompose(AEtConditionCompose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEtConditionCompose(AEtConditionCompose node)
    {
        inAEtConditionCompose(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurEt() != null)
        {
            node.getOperateurEt().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outAEtConditionCompose(node);
    }

    public void inAOuConditionCompose(AOuConditionCompose node)
    {
        defaultIn(node);
    }

    public void outAOuConditionCompose(AOuConditionCompose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAOuConditionCompose(AOuConditionCompose node)
    {
        inAOuConditionCompose(node);
        if(node.getGauche() != null)
        {
            node.getGauche().apply(this);
        }
        if(node.getOperateurOu() != null)
        {
            node.getOperateurOu().apply(this);
        }
        if(node.getDroite() != null)
        {
            node.getDroite().apply(this);
        }
        outAOuConditionCompose(node);
    }

    public void inAConditionCompose(AConditionCompose node)
    {
        defaultIn(node);
    }

    public void outAConditionCompose(AConditionCompose node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConditionCompose(AConditionCompose node)
    {
        inAConditionCompose(node);
        if(node.getParentheseO() != null)
        {
            node.getParentheseO().apply(this);
        }
        if(node.getConditionCompose() != null)
        {
            node.getConditionCompose().apply(this);
        }
        if(node.getParentheseF() != null)
        {
            node.getParentheseF().apply(this);
        }
        outAConditionCompose(node);
    }
}
